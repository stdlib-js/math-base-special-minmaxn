// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,t;e=this,t=function(){"use strict";var e,t="function"==typeof Object.defineProperty?Object.defineProperty:null,r=Object.defineProperty,n=Object.prototype,o=n.toString,u=n.__defineGetter__,a=n.__defineSetter__,i=n.__lookupGetter__,l=n.__lookupSetter__;e=function(){try{return t({},"x",{}),!0}catch(e){return!1}}()?r:function(e,t,r){var f,c,p,_;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof r||null===r||"[object Array]"===o.call(r))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+r+"`.");if((c="value"in r)&&(i.call(e,t)||l.call(e,t)?(f=e.__proto__,e.__proto__=n,delete e[t],e[t]=r.value,e.__proto__=f):e[t]=r.value),p="get"in r,_="set"in r,c&&(p||_))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return p&&u&&u.call(e,t,r.get),_&&a&&a.call(e,t,r.set),e};var f=e,c=Number.NEGATIVE_INFINITY;function p(e){return 0===e&&1/e===c}var _=Number.POSITIVE_INFINITY;function s(e){return 0===e&&1/e===_}function b(e){return e!=e}function d(e,t,r,n,o){var u,a,i,l,f;if(r=arguments[(u=arguments.length)-3],n=arguments[u-2],o=arguments[u-1],4===u)return r[o]=e,r[o+n]=e,r;if(5===u)return b(e)||b(t)?(r[o]=NaN,r[o+n]=NaN,r):e===t&&0===e?p(e)?(r[o]=e,r[o+n]=t,r):(r[o]=t,r[o+n]=e,r):e<t?(r[o]=e,r[o+n]=t,r):(r[o]=t,r[o+n]=e,r);for(a=_,i=c,f=0;f<u-3;f++){if(b(l=arguments[f]))return r[o]=NaN,r[o+n]=NaN,r;(l<a||0===l&&l===a&&p(l))&&(a=l),(l>i||0===l&&l===i&&s(l))&&(i=l)}return r[o]=a,r[o+n]=i,r}function y(){var e,t;for(e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);return e.push([0,0],1,0),d.apply(null,e)}return f(y,"assign",{configurable:!1,enumerable:!1,writable:!1,value:d}),y},"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).minmaxn=t();
//# sourceMappingURL=browser.js.map
